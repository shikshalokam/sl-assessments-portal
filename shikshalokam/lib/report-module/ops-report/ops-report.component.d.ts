import { OnInit } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { FormBuilder, FormGroup } from '@angular/forms';
import { MatAccordion, MatSnackBar } from '@angular/material';
import { OperationsService } from '../operations-service/operations.service';
import { UtilityService } from '../../core-module/services/utility-service/utility.service';
export declare class OpsReportComponent implements OnInit {
    private router;
    private route;
    private _fb;
    private operationService;
    private utility;
    private snackBar;
    reportGenerate: boolean;
    entityPageIndex: number;
    assessorPageIndex: number;
    entityGraph: any;
    assessorGraph: any;
    headings: string;
    currentUser: any;
    dynamicResize: any;
    columnNames: any;
    searchEntityId: any;
    filterData: any;
    maxDate: Date;
    filterForm: FormGroup;
    queryParamsUrl: string;
    searchEntityValue: string;
    searchAssessorName: string;
    filterObject: any;
    filterArray: any;
    entityReport: Object;
    itemsPerPage: number[];
    searchParam: string;
    assessorReport: any;
    summaryData: any;
    pageParam: any;
    pageReload: boolean;
    summaryGraph: object;
    entityPageLimit: any;
    assessorPageLimit: any;
    expandedFilters: boolean;
    entityLoading: boolean;
    assessorLoading: boolean;
    hostUrl: any;
    globalConfig: any;
    filterPanel: MatAccordion;
    summaryProfileData: any;
    currentRouterUrl: string;
    queryParamsRouterUrl: string;
    apiBaseUrl: any;
    reportConfig: any;
    linkId: any;
    share: any;
    publicSharedBaseUrl: any;
    shareLinkApi: any;
    noAssess: any;
    componentId: any;
    baseUrl: any;
    portalName: any;
    urlQueryParams: any;
    constructor(router: Router, route: ActivatedRoute, _fb: FormBuilder, operationService: OperationsService, utility: UtilityService, snackBar: MatSnackBar);
    pdf(id: any): void;
    ngOnInit(): void;
    filterApply(condition: any): void;
    mapGraphObject(data: any, type?: string): any;
    getTableHeader(object: any): any[];
    getData(object: any, i: any): any[];
    getUserProfile(solutionId: any): void;
    getColumn(object: any, i: any, j: any): any[];
    applyDate(value: any): string;
    applyFilter(obj: any): void;
    inputChange(key: any, event: any): void;
    selectType(key: any, value: any): void;
    generateReport(param: any): void;
    downloadCsv(id: any): void;
    download(object: any, id: any): void;
    setSearchParam(index: number, size: number, label: any): string;
    pageResponse(event: any): void;
    reportsDataFetch(): void;
    filters(url: any): void;
    mapQueryParams(data: any): any;
    getUserSummary(url: any): void;
    getEntityReport(label?: string): void;
    getAssessorReport(label?: string): void;
    searchEntityIdInApi(searchId: any): void;
    searchVal(id: any, searchValue: any): void;
    searchInApi(label: any, value: any): void;
}
